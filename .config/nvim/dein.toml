[[plugins]]
repo = 'Shougo/dein.vim'

#################
# color schemes #
#################

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'arcticicestudio/nord-vim' 

[[plugins]]
repo = 'ghifarit53/tokyonight-vim'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'raphamorim/lucario'

[[plugins]]
repo = 'w0ng/vim-hybrid'

###############
# status line #
###############
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
      \ 'left': [ ['mode', 'paste'], ['readonly', 'branchName', 'filepath', 'modified'] ]
      \ },
    \ 'component_function':{
    \ 'filepath': 'FilePath',
    \ },
  \ }
  function! FilePath()
  if winwidth(0) > 90
    return expand("%:s")
  else
    return expand("%:t")
  endif
  endfunction
  " # show statusbar
  set laststatus=2
  " # hide --INSERT--
  set noshowmode
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# merged = 0
# 'rev' = 'release'
# hook_add='''
#   inoremap <silent><expr> <TAB>
#         \ pumvisible() ? "\<C-n>" :
#         \ <SID>check_back_space() ? "\<TAB>" :
#         \ coc#refresh()
#   inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

#   function! s:check_back_space() abort
#     let col = col('.') - 1
#     return !col || getline('.')[col - 1]  =~# '\s'
#   endfunction

#   inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
#   " Use <C-space> to trigger completion.
#   inoremap <silent><expr> <C-space> coc#refresh()

#   " Remap keys for gotos
#   nmap <silent> gd <Plug>(coc-definition)
#   nmap <silent> gy <Plug>(coc-type-definition)
#   nmap <silent> gi <Plug>(coc-implementation)
#   nmap <silent> gr <Plug>(coc-references)

#   nnoremap <silent> H :call <SID>show_documentation()<CR>

#   function! s:show_documentation()
#     if (index(['vim','help'], &filetype) >= 0)
#       execute 'h '.expand('<cword>')
#     else
#       call CocAction('doHover')
#     endif
#   endfunction
# '''

[[plugins]]
repo = 'jiangmiao/auto-pairs'


[[plugins]]
repo = 'preservim/nerdtree'
hook_add='''
  map <Leader>b :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add='''
  let g:cheatsheet#cheat_file = '~/dotfiles/.config/nvim/cheatsheet.md'
'''
[[plugins]]
repo = 'simeji/winresizer'
hook_add='''
  let g:winresizer_start_key = '<C-y>'
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add='''
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add='''

"" linterとして指定
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ 'javascript': ['eslint'],
    \ }
"" formatterとして指定
let g:ale_fixers = {
    \ 'python': ['black', 'isort'],
    \ }


"" パスを指定
  let g:ale_python_flake8_executable = g:python3_host_prog
  let g:ale_python_flake8_options = '-m flake8'
  let g:ale_python_autopep8_executable = g:python3_host_prog
  let g:ale_python_autopep8_options = '-m autopep8'
  let g:ale_python_isort_executable = g:python3_host_prog
  let g:ale_python_isort_options = '-m isort'
  let g:ale_python_black_executable = g:python3_host_prog
  let g:ale_python_black_options = '-m black'

"" メッセージを表示
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" "" メッセージの移動
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
"" let g:ale_use_global_executables = 1
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

[[plugins]]
repo = 'JuliaEditorSupport/julia-vim'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'
hook_add='''
  let g:fzf_preview_window = []
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<C-g><C-g>"
""  let g:UltiSnipsJumpForwardTrigger="<c-f>"
""  let g:UltiSnipsJumpBackwardTrigger="<c-b>"
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"
'''

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = "ap/vim-buftabline"
